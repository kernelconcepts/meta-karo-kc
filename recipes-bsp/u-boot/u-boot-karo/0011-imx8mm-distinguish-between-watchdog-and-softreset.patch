From f60b97408e4ad83bf0d87f3222c89b9635f31b02 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lothar=20Wa=C3=9Fmann?= <LW@KARO-electronics.de>
Date: Tue, 26 Mar 2019 10:36:09 +0100
Subject: [PATCH 11/35] imx8mm: distinguish between watchdog and softreset

On the i.MX processors the WRSR register can tell whether the last
reset was caused by a watchdog timeout or by triggering a softreset
via the WDOG_SRS bit.
Utilize this to distinguish a WDOG reset from a SOFTRESET in the
reset_cause.
---
 arch/arm/mach-imx/cpu.c | 41 +++++++++++++++++++++--------------------
 include/fsl_wdog.h      | 18 +++++++++++-------
 2 files changed, 32 insertions(+), 27 deletions(-)

diff --git a/arch/arm/mach-imx/cpu.c b/arch/arm/mach-imx/cpu.c
index 41c7a09..e04219f 100644
--- a/arch/arm/mach-imx/cpu.c
+++ b/arch/arm/mach-imx/cpu.c
@@ -10,6 +10,7 @@
 
 #include <bootm.h>
 #include <common.h>
+#include <fsl_wdog.h>
 #include <netdev.h>
 #include <linux/errno.h>
 #include <asm/io.h>
@@ -37,10 +38,12 @@
 #if defined(CONFIG_DISPLAY_CPUINFO) && !defined(CONFIG_SPL_BUILD)
 static u32 reset_cause = -1;
 
-static char *get_reset_cause(void)
+static const char *get_reset_cause(void)
 {
 	u32 cause;
 	struct src *src_regs = (struct src *)SRC_BASE_ADDR;
+	struct watchdog_regs *wdog = (struct watchdog_regs *)WDOG1_BASE_ADDR;
+	u16 wrsr = readw(&wdog->wrsr);
 
 	cause = readl(&src_regs->srsr);
 #ifndef CONFIG_ANDROID_BOOT_IMAGE
@@ -51,45 +54,43 @@ static char *get_reset_cause(void)
 #endif
 	reset_cause = cause;
 
-	switch (cause) {
-	case 0x00001:
-	case 0x00011:
+	if (cause == 1)
 		return "POR";
-	case 0x00004:
+	if (cause & 0x00004)
 		return "CSU";
-	case 0x00008:
+	if (cause & 0x00008)
 		return "IPP USER";
-	case 0x00010:
+	if (cause & 0x00010)
+		if (wrsr & WRSR_SFTW)
+			return "SOFT";
 #ifdef	CONFIG_MX7
 		return "WDOG1";
 #else
 		return "WDOG";
 #endif
-	case 0x00020:
+	if (cause & 0x00020)
 		return "JTAG HIGH-Z";
-	case 0x00040:
+	if (cause & 0x00040)
 		return "JTAG SW";
-	case 0x00080:
+	if (cause & 0x00080)
 		return "WDOG3";
 #ifdef CONFIG_MX7
-	case 0x00100:
+	if (cause & 0x00100)
 		return "WDOG4";
-	case 0x00200:
+	if (cause & 0x00200)
 		return "TEMPSENSE";
 #elif defined(CONFIG_IMX8M)
-	case 0x00100:
+	if (cause & 0x00100)
 		return "WDOG2";
-	case 0x00200:
+	if (cause & 0x00200)
 		return "TEMPSENSE";
 #else
-	case 0x00100:
+	if (cause & 0x00100)
 		return "TEMPSENSE";
-	case 0x10000:
+	if (cause & 0x10000)
 		return "WARM BOOT";
 #endif
-	default:
-		return "unknown reset";
-	}
+	return "unknown reset";
 }
 
 #ifdef CONFIG_ANDROID_BOOT_IMAGE
@@ -97,7 +98,7 @@ void get_reboot_reason(char *ret)
 {
 	struct src *src_regs = (struct src *)SRC_BASE_ADDR;
 
-	strcpy(ret, (char *)get_reset_cause());
+	strcpy(ret, get_reset_cause());
 	/* clear the srsr here, its state has been recorded in reset_cause */
 	writel(reset_cause, &src_regs->srsr);
 }
diff --git a/include/fsl_wdog.h b/include/fsl_wdog.h
index 683c3f3..4d77830 100644
--- a/include/fsl_wdog.h
+++ b/include/fsl_wdog.h
@@ -3,6 +3,7 @@
  *
  * SPDX-License-Identifier:	GPL-2.0+
  */
+#include <linux/bitops.h>
 
 struct watchdog_regs {
 	u16	wcr;	/* Control */
@@ -10,11 +11,14 @@ struct watchdog_regs {
 	u16	wrsr;	/* Reset Status */
 };
 
-#define WCR_WDZST	0x01
-#define WCR_WDBG	0x02
-#define WCR_WDE		0x04
-#define WCR_WDT		0x08
-#define WCR_SRS		0x10
-#define WCR_WDA 	0x20
-#define SET_WCR_WT(x)	(x << 8)
+#define WCR_WDZST	BIT(0)
+#define WCR_WDBG	BIT(1)
+#define WCR_WDE		BIT(2)
+#define WCR_WDT		BIT(3)
+#define WCR_SRS		BIT(4)
+#define WCR_WDA		BIT(5)
+#define SET_WCR_WT(x)	((x) << 8)
 #define WCR_WT_MSK	SET_WCR_WT(0xFF)
+
+#define WRSR_SFTW	BIT(0)
+#define WRSR_TOUT	BIT(1)
-- 
2.7.4

