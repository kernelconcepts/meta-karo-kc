From d6f9ddd70d7f69462f71e9e9cffe7f50074905c8 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lothar=20Wa=C3=9Fmann?= <LW@KARO-electronics.de>
Date: Tue, 21 Jan 2020 12:49:33 +0100
Subject: [PATCH 27/35] net: fec: various cleanups

---
 drivers/net/fec_mxc.c | 34 +++++++++++++++++++---------------
 1 file changed, 19 insertions(+), 15 deletions(-)

diff --git a/drivers/net/fec_mxc.c b/drivers/net/fec_mxc.c
index cc23aea..692e2f1 100644
--- a/drivers/net/fec_mxc.c
+++ b/drivers/net/fec_mxc.c
@@ -15,9 +15,9 @@
 #include <miiphy.h>
 #include <net.h>
 #include <netdev.h>
-#include "fec_mxc.h"
 
 #include <asm/io.h>
+#include <asm-generic/gpio.h>
 #include <linux/errno.h>
 #include <linux/compiler.h>
 
@@ -25,6 +25,7 @@
 #include <asm/arch/imx-regs.h>
 #include <asm/mach-imx/sys_proto.h>
 #include <asm/arch/sys_proto.h>
+#include "fec_mxc.h"
 
 DECLARE_GLOBAL_DATA_PTR;
 
@@ -427,7 +428,7 @@ static int fec_open(struct eth_device *edev)
 	ulong addr, size;
 	int i;
 
-	debug("fec_open: fec_open(dev)\n");
+	debug("%s(dev)\n", __func__);
 	/* full-duplex, heartbeat disabled */
 	writel(1 << 2, &fec->eth->x_cntrl);
 	fec->rbd_index = 0;
@@ -514,7 +515,7 @@ static int fec_open(struct eth_device *edev)
 		writel(rcr, &fec->eth->r_cntrl);
 	}
 #endif
-	debug("%s:Speed=%i\n", __func__, speed);
+	debug("%s: Speed=%i\n", __func__, speed);
 
 	/* Enable SmartDMA receive task */
 	fec_rx_task_enable(fec);
@@ -612,7 +613,7 @@ static void fec_halt(struct eth_device *dev)
 	writel(FEC_TCNTRL_GTS | readl(&fec->eth->x_cntrl),
 	       &fec->eth->x_cntrl);
 
-	debug("eth_halt: wait for stop regs\n");
+	debug("%s: wait for stop regs\n", __func__);
 	/* wait for graceful stop to register */
 	while ((counter--) && (!(readl(&fec->eth->ievent) & FEC_IEVENT_GRA)))
 		udelay(1);
@@ -629,7 +630,7 @@ static void fec_halt(struct eth_device *dev)
 	       &fec->eth->ecntrl);
 	fec->rbd_index = 0;
 	fec->tbd_index = 0;
-	debug("eth_halt: done\n");
+	debug("%s: done\n", __func__);
 }
 
 /**
@@ -773,7 +774,7 @@ static int fec_send(struct eth_device *dev, void *packet, int length)
 		ret = -EINVAL;
 
 out:
-	debug("fec_send: status 0x%x index %d ret %i\n",
+	debug("%s: status 0x%08x index %d ret %i\n", __func__,
 	      readw(&fec->tbd_base[fec->tbd_index].status),
 	      fec->tbd_index, ret);
 	/* for next transmission use the other buffer */
@@ -820,8 +821,10 @@ static int fec_recv(struct eth_device *dev)
 
 	/* Check if any critical events have happened */
 	ievent = readl(&fec->eth->ievent);
-	writel(ievent, &fec->eth->ievent);
-	debug("fec_recv: ievent 0x%lx\n", ievent);
+	if (ievent) {
+		debug("%s: ievent 0x%08lx\n", __func__, ievent);
+		writel(ievent, &fec->eth->ievent);
+	}
 	if (ievent & FEC_IEVENT_BABR) {
 #ifdef CONFIG_DM_ETH
 		fecmxc_halt(dev);
@@ -875,9 +878,9 @@ static int fec_recv(struct eth_device *dev)
 	invalidate_dcache_range(addr, addr + size);
 
 	bd_status = readw(&rbd->status);
-	debug("fec_recv: status 0x%x\n", bd_status);
 
 	if (!(bd_status & FEC_RBD_EMPTY)) {
+		debug("%s: status 0x%08x\n", __func__, bd_status);
 		if ((bd_status & FEC_RBD_LAST) && !(bd_status & FEC_RBD_ERR) &&
 		    ((readw(&rbd->data_length) - 4) > 14)) {
 			/* Get buffer address and size */
@@ -926,8 +929,8 @@ static int fec_recv(struct eth_device *dev)
 
 		fec_rx_task_enable(fec);
 		fec->rbd_index = (fec->rbd_index + 1) % FEC_RBD_NUM;
+		debug("%s: stop\n", __func__);
 	}
-	debug("fec_recv: stop\n");
 
 	return len;
 }
@@ -1152,7 +1155,7 @@ int fecmxc_initialize_multi(bd_t *bd, int dev_id, int phy_id, uint32_t addr)
 
 #ifdef CONFIG_MX6
 	if (mx6_enet_fused(addr)) {
-		printf("Ethernet@0x%x is fused, disable it\n", addr);
+		printf("Ethernet@0x%08x is fused, disable it\n", addr);
 		return -2;
 	}
 #endif
@@ -1167,7 +1170,8 @@ int fecmxc_initialize_multi(bd_t *bd, int dev_id, int phy_id, uint32_t addr)
 	base_mii = addr;
 #endif
 	init_clk_fec(dev_id);
-	debug("eth_init: fec_probe(bd, %i, %i) @ %08x\n", dev_id, phy_id, addr);
+	debug("%s: fec_probe(bd, %i, %i) @ %08x\n", __func__,
+	      dev_id, phy_id, addr);
 	bus = fec_get_miibus((ulong)base_mii, dev_id);
 	if (!bus)
 		return -ENOMEM;
@@ -1263,12 +1267,12 @@ static int fecmxc_probe(struct udevice *dev)
 	struct eth_pdata *pdata = dev_get_platdata(dev);
 	struct fec_priv *priv = dev_get_priv(dev);
 	struct mii_dev *bus = NULL;
-	uint32_t start;
+	unsigned long start;
 	int ret;
 
 #ifdef CONFIG_MX6
 	if (mx6_enet_fused((uint32_t)priv->eth)) {
-		printf("Ethernet@0x%x is fused, disable it\n", (uint32_t)priv->eth);
+		printf("Ethernet@%p is fused, disable it\n", priv->eth);
 		return -ENODEV;
 	}
 #endif
@@ -1348,7 +1352,7 @@ static int fecmxc_ofdata_to_platdata(struct udevice *dev)
 	if (phy_mode)
 		pdata->phy_interface = phy_get_interface_by_name(phy_mode);
 	if (pdata->phy_interface == -1) {
-		debug("%s: Invalid PHY interface '%s'\n", __func__, phy_mode);
+		dev_err(dev, "Invalid PHY interface '%s'\n", phy_mode);
 		return -EINVAL;
 	}
 
-- 
2.7.4

