From 464e2c34fb641b6cf68694d989fa94d10edb8cac Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lothar=20Wa=C3=9Fmann?= <LW@KARO-electronics.de>
Date: Wed, 27 Mar 2019 14:55:59 +0100
Subject: [PATCH 15/35] fs/fs.c: correctly interpret the '(max)len' parameter
 to fs_read()

The 'len' parameter passed to fs_read() actually denotes the maximum
number of bytes that fit into the callers buffer, not an expected
amount of data to be read.
Rename the parameter accordingly and honor the maxlen requested by the
caller appropriately.
Also remove the bogus warning message printed when the number of bytes
read is smaller than maxlen.
---
 fs/fs.c | 25 ++++++++++++++++---------
 1 file changed, 16 insertions(+), 9 deletions(-)

diff --git a/fs/fs.c b/fs/fs.c
index 6155cb1..e11706d 100644
--- a/fs/fs.c
+++ b/fs/fs.c
@@ -390,24 +390,31 @@ int fs_size(const char *filename, loff_t *size)
 	return ret;
 }
 
-int fs_read(const char *filename, ulong addr, loff_t offset, loff_t len,
+int fs_read(const char *filename, ulong addr, loff_t offset, loff_t maxlen,
 	    loff_t *actread)
 {
 	struct fstype_info *info = fs_get_info(fs_type);
 	void *buf;
 	int ret;
+	loff_t len;
 
-	/*
-	 * We don't actually know how many bytes are being read, since len==0
-	 * means read the whole file.
-	 */
+	ret = info->size(filename, &len);
+	if (ret) {
+		printf("Failed to determine size of file %s: %d\n",
+		       filename, ret);
+		goto err;
+	}
+	if (maxlen == 0)
+		maxlen = len;
+	else if (len > maxlen)
+		printf("** File %s larger than buffer size; truncating to %llu of %llu bytes\n",
+		       filename, maxlen, len);
+
+	len = min(len, maxlen);
 	buf = map_sysmem(addr, len);
 	ret = info->read(filename, buf, offset, len, actread);
 	unmap_sysmem(buf);
-
-	/* If we requested a specific number of bytes, check we got it */
-	if (ret == 0 && len && *actread != len)
-		debug("** %s shorter than offset + len **\n", filename);
+ err:
 	fs_close();
 
 	return ret;
-- 
2.7.4

