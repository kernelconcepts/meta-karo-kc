From ffa9c1a2fd90fa7c5820a8641c9b2680d644b44b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lothar=20Wa=C3=9Fmann?= <LW@KARO-electronics.de>
Date: Tue, 21 Jan 2020 12:51:17 +0100
Subject: [PATCH 29/35] net: fec: don't blindly assign xcv_type from
 CONFIG_FEC_XCV_TYPE

With CONFIG_OF_CONTROL enabled the MII interface type is determined by
the DT settings, rather than some CONFIG_ variables.
Try to determine the interface type from the DT settings and fall back
to the defined CONFIG_FEC_XCV_TYPE.
---
 drivers/net/fec_mxc.c | 19 ++++++++++++++++++-
 1 file changed, 18 insertions(+), 1 deletion(-)

diff --git a/drivers/net/fec_mxc.c b/drivers/net/fec_mxc.c
index 016464b..cba6dce 100644
--- a/drivers/net/fec_mxc.c
+++ b/drivers/net/fec_mxc.c
@@ -1308,8 +1308,25 @@ static int fecmxc_probe(struct udevice *dev)
 	}
 
 	priv->bus = bus;
-	priv->xcv_type = CONFIG_FEC_XCV_TYPE;
 	priv->interface = pdata->phy_interface;
+	switch (priv->interface) {
+	case PHY_INTERFACE_MODE_MII:
+		priv->xcv_type = MII100;
+		break;
+	case PHY_INTERFACE_MODE_RMII:
+		priv->xcv_type = RMII;
+		break;
+	case PHY_INTERFACE_MODE_RGMII:
+	case PHY_INTERFACE_MODE_RGMII_ID:
+	case PHY_INTERFACE_MODE_RGMII_RXID:
+	case PHY_INTERFACE_MODE_RGMII_TXID:
+		priv->xcv_type = RGMII;
+		break;
+	default:
+		priv->xcv_type = CONFIG_FEC_XCV_TYPE;
+		printf("Unsupported interface type %d defaulting to %d\n",
+		       priv->interface, priv->xcv_type);
+	}
 	ret = fec_phy_init(priv, dev);
 	if (ret)
 		goto err_phy;
-- 
2.7.4

