From 5fff64818c0c562a97f3625f413db06b49411e8b Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Lothar=20Wa=C3=9Fmann?= <LW@KARO-electronics.de>
Date: Thu, 28 Nov 2019 16:13:47 +0100
Subject: [PATCH 16/35] drivers: ddr: imx8m: silence noisy messages

---
 drivers/ddr/imx8m/ddr_init.c     |  8 ++++----
 drivers/ddr/imx8m/ddrphy_train.c |  2 +-
 drivers/ddr/imx8m/ddrphy_utils.c |  2 +-
 drivers/ddr/imx8m/helper.c       | 36 ++++++++++++++++++++----------------
 4 files changed, 26 insertions(+), 22 deletions(-)

diff --git a/drivers/ddr/imx8m/ddr_init.c b/drivers/ddr/imx8m/ddr_init.c
index 8349f29..5d2c4ee 100644
--- a/drivers/ddr/imx8m/ddr_init.c
+++ b/drivers/ddr/imx8m/ddr_init.c
@@ -26,7 +26,7 @@ void ddr_init(struct dram_timing_info *dram_timing)
 {
 	unsigned int tmp, initial_drate, target_freq;
 
-	printf("DDRINFO: start DRAM init\n");
+	debug("DDRINFO: start DRAM init\n");
 
 	/* Step1: Follow the power up procedure */
 	if (is_imx8mq()) {
@@ -99,7 +99,7 @@ void ddr_init(struct dram_timing_info *dram_timing)
 	 * Step8 ~ Step13: Start PHY initialization and training by
 	 * accessing relevant PUB registers
 	 */
-	debug("DDRINFO:ddrphy config start\n");
+	debug("DDRINFO: ddrphy config start\n");
 	ddr_cfg_phy(dram_timing);
 	debug("DDRINFO: ddrphy config done\n");
 
@@ -111,7 +111,7 @@ void ddr_init(struct dram_timing_info *dram_timing)
 		tmp = reg32_read(DDRPHY_CalBusy(0));
 	} while ((tmp & 0x1));
 
-	printf("DDRINFO:ddrphy calibration done\n");
+	debug("DDRINFO: ddrphy calibration done\n");
 
 	/* Step15: Set SWCTL.sw_done to 0 */
 	reg32_write(DDRC_SWCTL(0), 0x00000000);
@@ -163,7 +163,7 @@ void ddr_init(struct dram_timing_info *dram_timing)
 
 	/* enable port 0 */
 	reg32_write(DDRC_PCTRL_0(0), 0x00000001);
-	printf("DDRINFO: ddrmix config done\n");
+	debug("DDRINFO: ddrmix config done\n");
 
 	/* save the dram timing config into memory */
 	dram_config_save(dram_timing, CONFIG_SAVED_DRAM_TIMING_BASE);
diff --git a/drivers/ddr/imx8m/ddrphy_train.c b/drivers/ddr/imx8m/ddrphy_train.c
index 310099d..1648ff4 100644
--- a/drivers/ddr/imx8m/ddrphy_train.c
+++ b/drivers/ddr/imx8m/ddrphy_train.c
@@ -28,7 +28,7 @@ void ddr_cfg_phy(struct dram_timing_info *dram_timing)
 	/* load the frequency setpoint message block config */
 	fsp_msg = dram_timing->fsp_msg;
 	for (i = 0; i < dram_timing->fsp_msg_num; i++) {
-		printf("DRAM PHY training for %dMTS\n", fsp_msg->drate);
+		debug("DRAM PHY training for %dMTS\n", fsp_msg->drate);
 		/* set dram PHY input clocks to desired frequency */
 		ddrphy_init_set_dfi_clk(fsp_msg->drate);
 
diff --git a/drivers/ddr/imx8m/ddrphy_utils.c b/drivers/ddr/imx8m/ddrphy_utils.c
index d99e709..663f9de 100644
--- a/drivers/ddr/imx8m/ddrphy_utils.c
+++ b/drivers/ddr/imx8m/ddrphy_utils.c
@@ -96,7 +96,7 @@ void wait_ddrphy_training_complete(void)
 		if (mail == 0x08) {
 			decode_streaming_message();
 		} else if (mail == 0x07) {
-			printf("Training PASS\n");
+			debug("Training PASS\n");
 			break;
 		} else if (mail == 0xff) {
 			printf("Training FAILED\n");
diff --git a/drivers/ddr/imx8m/helper.c b/drivers/ddr/imx8m/helper.c
index e50e422..c77f67b 100644
--- a/drivers/ddr/imx8m/helper.c
+++ b/drivers/ddr/imx8m/helper.c
@@ -18,7 +18,7 @@ DECLARE_GLOBAL_DATA_PTR;
 
 #define IMEM_LEN 32768 /* byte */
 #define DMEM_LEN 16384 /* byte */
-#define IMEM_2D_OFFSET 	49152
+#define IMEM_2D_OFFSET	49152
 
 #define IMEM_OFFSET_ADDR 0x00050000
 #define DMEM_OFFSET_ADDR 0x00054000
@@ -58,7 +58,7 @@ void ddr_load_train_firmware(enum fw_type type)
 		i += 4;
 	}
 
-	printf("check ddr_pmu_train_imem code\n");
+	debug("check ddr_pmu_train_imem code\n");
 	pr_from32 = imem_start;
 	pr_to32 = DDR_TRAIN_CODE_BASE_ADDR + 4 * IMEM_OFFSET_ADDR;
 	for (i = 0x0; i < IMEM_LEN; ) {
@@ -66,21 +66,23 @@ void ddr_load_train_firmware(enum fw_type type)
 		pr_to32 += 4;
 		tmp32 += ((readw(pr_to32) & 0x0000ffff) << 16);
 
-		if(tmp32 != readl(pr_from32)){
-			printf("%lx %lx\n", pr_from32, pr_to32);
+		if (tmp32 != readl(pr_from32)) {
+			if (error < 256)
+				printf("memory error: %08lx %08lx\n",
+				       pr_from32, pr_to32);
 			error++;
 		}
 		pr_from32 += 4;
 		pr_to32 += 4;
 		i += 4;
 	}
-	if (error) {
-		printf("check ddr_pmu_train_imem code fail=%d\n",error);
-	} else {
-		printf("check ddr_pmu_train_imem code pass\n");
-	}
+	if (error)
+		debug("check ddr_pmu_train_imem code failed with %d errors\n",
+		      error);
+	else
+		debug("check ddr_pmu_train_imem code pass\n");
 
-	printf("check ddr_pmu_train_dmem code\n");
+	debug("check ddr_pmu_train_dmem code\n");
 	pr_from32 = dmem_start;
 	pr_to32 = DDR_TRAIN_CODE_BASE_ADDR + 4 * DMEM_OFFSET_ADDR;
 	for (i = 0x0; i < DMEM_LEN;) {
@@ -88,7 +90,9 @@ void ddr_load_train_firmware(enum fw_type type)
 		pr_to32 += 4;
 		tmp32 += ((readw(pr_to32) & 0x0000ffff) << 16);
 		if (tmp32 != readl(pr_from32)) {
-			printf("%lx %lx\n", pr_from32, pr_to32);
+			if (error < 256)
+				printf("memory error: %08lx %08lx\n",
+				       pr_from32, pr_to32);
 			error++;
 		}
 		pr_from32 += 4;
@@ -96,11 +100,11 @@ void ddr_load_train_firmware(enum fw_type type)
 		i += 4;
 	}
 
-	if (error) {
-		printf("check ddr_pmu_train_dmem code fail=%d",error);
-	} else {
-		printf("check ddr_pmu_train_dmem code pass\n");
-	}
+	if (error)
+		printf("check ddr_pmu_train_dmem code failes with %d errors",
+		       error);
+	else
+		debug("check ddr_pmu_train_dmem code pass\n");
 }
 
 void ddrphy_trained_csr_save(struct dram_cfg_param *ddrphy_csr, unsigned int num)
-- 
2.7.4

